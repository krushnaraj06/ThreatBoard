// Report export utilities for vulnerability data and remediation guides

export const exportToCSV = (vulnerabilities, filename = 'vulnerability-report.csv') => {
  const headers = [
    'CVE ID',
    'Title',
    'Description',
    'Severity',
    'Priority Score',
    'Urgency',
    'Asset',
    'CVSS Score',
    'Exploit Available',
    'Published Date',
    'Time to Fix',
    'Business Impact',
    'Risk Factors',
    'Top Remediation Action'
  ];

  const csvContent = [
    headers.join(','),
    ...vulnerabilities.map(vuln => [
      `"${vuln.cveId || 'N/A'}"`,
      `"${(vuln.title || '').replace(/"/g, '""')}"`,
      `"${(vuln.description || '').replace(/"/g, '""').substring(0, 200)}..."`,
      `"${vuln.severity || 'Unknown'}"`,
      `"${vuln.priorityScore || 0}"`,
      `"${vuln.urgency || 'Unknown'}"`,
      `"${vuln.asset || 'Unknown'}"`,
      `"${vuln.cvssScore || 'N/A'}"`,
      `"${vuln.exploitAvailable ? 'Yes' : 'No'}"`,
      `"${vuln.publishedDate || 'N/A'}"`,
      `"${vuln.timeToFix || 'Unknown'}"`,
      `"${(vuln.businessImpact || '').replace(/"/g, '""').substring(0, 100)}..."`,
      `"${(vuln.riskFactors || []).join('; ')}"`,
      `"${vuln.remediationAdvice && vuln.remediationAdvice[0] ? vuln.remediationAdvice[0].action : 'N/A'}"`
    ].join(','))
  ].join('\n');

  downloadFile(csvContent, filename, 'text/csv');
};

export const exportToJSON = (vulnerabilities, filename = 'vulnerability-report.json') => {
  const reportData = {
    generatedAt: new Date().toISOString(),
    summary: {
      totalVulnerabilities: vulnerabilities.length,
      severityBreakdown: getSeverityBreakdown(vulnerabilities),
      urgencyBreakdown: getUrgencyBreakdown(vulnerabilities),
      averagePriorityScore: getAveragePriorityScore(vulnerabilities),
      exploitableCount: vulnerabilities.filter(v => v.exploitAvailable).length
    },
    vulnerabilities: vulnerabilities.map(vuln => ({
      ...vuln,
      // Clean up any circular references or functions
      riskFactors: vuln.riskFactors || [],
      remediationAdvice: vuln.remediationAdvice || [],
      businessImpact: vuln.businessImpact || '',
      priorityScore: vuln.priorityScore || 0,
      urgency: vuln.urgency || 'Unknown',
      timeToFix: vuln.timeToFix || 'Unknown'
    }))
  };

  const jsonContent = JSON.stringify(reportData, null, 2);
  downloadFile(jsonContent, filename, 'application/json');
};

export const exportRemediationGuide = (vulnerability, filename) => {
  const reportFilename = filename || `remediation-guide-${vulnerability.cveId || 'vulnerability'}.md`;
  
  const markdownContent = generateMarkdownReport(vulnerability);
  downloadFile(markdownContent, reportFilename, 'text/markdown');
};

export const exportExecutiveSummary = (vulnerabilities, filename = 'executive-summary.md') => {
  const summary = generateExecutiveSummary(vulnerabilities);
  downloadFile(summary, filename, 'text/markdown');
};

const generateMarkdownReport = (vuln) => {
  const date = new Date().toLocaleDateString();
  
  return `# Vulnerability Remediation Guide

**Generated:** ${date}
**CVE ID:** ${vuln.cveId || 'N/A'}
**Severity:** ${vuln.severity || 'Unknown'}
**Priority Score:** ${vuln.priorityScore || 0}/150

## Vulnerability Summary

**Title:** ${vuln.title || 'Unknown Vulnerability'}

**Description:** ${vuln.description || 'No description available'}

**Affected Asset:** ${vuln.asset || 'Unknown'}

**CVSS Score:** ${vuln.cvssScore || 'N/A'}

**Exploit Available:** ${vuln.exploitAvailable ? 'Yes ⚠️' : 'No'}

**Time to Fix:** ${vuln.timeToFix || 'Unknown'}

## Business Impact

${vuln.businessImpact || 'Impact assessment not available'}

## Risk Factors

${(vuln.riskFactors || []).map(factor => `- ${factor}`).join('\n')}

## Remediation Actions

${(vuln.remediationAdvice || []).map((advice, index) => `
### ${index + 1}. ${advice.action}

**Priority:** ${advice.priority}
**Description:** ${advice.action}

`).join('\n')}

## Additional Resources

- [NVD Database Entry](https://nvd.nist.gov/vuln/detail/${vuln.cveId})
- [MITRE CVE Entry](https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vuln.cveId})
- [NIST Cybersecurity Framework](https://www.nist.gov/cyberframework)

---
*This report was generated by ThreatBoard Vulnerability Management System*
`;
};

const generateExecutiveSummary = (vulnerabilities) => {
  const date = new Date().toLocaleDateString();
  const severityBreakdown = getSeverityBreakdown(vulnerabilities);
  const urgencyBreakdown = getUrgencyBreakdown(vulnerabilities);
  const exploitableCount = vulnerabilities.filter(v => v.exploitAvailable).length;
  const avgScore = getAveragePriorityScore(vulnerabilities);

  const criticalVulns = vulnerabilities.filter(v => v.urgency === 'Critical').slice(0, 5);
  const highVulns = vulnerabilities.filter(v => v.urgency === 'High').slice(0, 5);

  return `# Executive Vulnerability Assessment Summary

**Date:** ${date}
**Total Vulnerabilities:** ${vulnerabilities.length}
**Average Priority Score:** ${avgScore.toFixed(1)}/150

## Key Findings

### Severity Distribution
- **Critical:** ${severityBreakdown.Critical || 0} vulnerabilities
- **High:** ${severityBreakdown.High || 0} vulnerabilities  
- **Medium:** ${severityBreakdown.Medium || 0} vulnerabilities
- **Low:** ${severityBreakdown.Low || 0} vulnerabilities

### Urgency Assessment
- **Critical Priority:** ${urgencyBreakdown.Critical || 0} vulnerabilities (immediate action required)
- **High Priority:** ${urgencyBreakdown.High || 0} vulnerabilities (action within 24-48 hours)
- **Medium Priority:** ${urgencyBreakdown.Medium || 0} vulnerabilities (action within 1-2 weeks)
- **Low Priority:** ${urgencyBreakdown.Low || 0} vulnerabilities (routine maintenance)

### Risk Indicators
- **Exploitable Vulnerabilities:** ${exploitableCount} (${((exploitableCount/vulnerabilities.length)*100).toFixed(1)}%)
- **Public Exploits Available:** ${exploitableCount > 0 ? '⚠️ YES - Immediate attention required' : '✅ None identified'}

## Critical Vulnerabilities Requiring Immediate Action

${criticalVulns.length > 0 ? criticalVulns.map((vuln, index) => `
### ${index + 1}. ${vuln.cveId || 'N/A'} - ${vuln.title}
- **Asset:** ${vuln.asset}
- **Priority Score:** ${vuln.priorityScore}/150
- **Time to Fix:** ${vuln.timeToFix}
- **Exploit Available:** ${vuln.exploitAvailable ? 'Yes ⚠️' : 'No'}
`).join('\n') : 'No critical priority vulnerabilities identified.'}

## High Priority Vulnerabilities

${highVulns.length > 0 ? highVulns.map((vuln, index) => `
### ${index + 1}. ${vuln.cveId || 'N/A'} - ${vuln.title}
- **Asset:** ${vuln.asset}
- **Priority Score:** ${vuln.priorityScore}/150
- **Time to Fix:** ${vuln.timeToFix}
`).join('\n') : 'No high priority vulnerabilities identified.'}

## Recommendations

### Immediate Actions (0-24 hours)
1. **Address Critical Priority Vulnerabilities:** Focus on the ${urgencyBreakdown.Critical || 0} critical priority items
2. **Patch Exploitable Vulnerabilities:** ${exploitableCount} vulnerabilities have public exploits available
3. **Network Isolation:** Consider isolating affected critical assets if immediate patching is not possible

### Short-term Actions (1-7 days)
1. **Address High Priority Vulnerabilities:** Work through the ${urgencyBreakdown.High || 0} high priority items
2. **Implement Enhanced Monitoring:** Deploy additional monitoring for affected systems
3. **Review Access Controls:** Strengthen authentication and authorization mechanisms

### Long-term Actions (1-4 weeks)
1. **Systematic Remediation:** Address remaining medium and low priority vulnerabilities
2. **Process Improvement:** Implement automated vulnerability scanning and patch management
3. **Security Training:** Conduct security awareness training for relevant teams

## Risk Assessment

**Overall Risk Level:** ${avgScore >= 80 ? 'HIGH' : avgScore >= 60 ? 'MEDIUM' : 'LOW'}

**Key Risk Factors:**
${vulnerabilities.length > 0 ? Array.from(new Set(vulnerabilities.flatMap(v => v.riskFactors || []))).slice(0, 10).map(factor => `- ${factor}`).join('\n') : '- No specific risk factors identified'}

---
*This executive summary was generated by ThreatBoard Vulnerability Management System*
*For detailed remediation guidance, please refer to individual vulnerability reports*
`;
};

const getSeverityBreakdown = (vulnerabilities) => {
  return vulnerabilities.reduce((acc, vuln) => {
    const severity = vuln.severity || 'Unknown';
    acc[severity] = (acc[severity] || 0) + 1;
    return acc;
  }, {});
};

const getUrgencyBreakdown = (vulnerabilities) => {
  return vulnerabilities.reduce((acc, vuln) => {
    const urgency = vuln.urgency || 'Unknown';
    acc[urgency] = (acc[urgency] || 0) + 1;
    return acc;
  }, {});
};

const getAveragePriorityScore = (vulnerabilities) => {
  if (vulnerabilities.length === 0) return 0;
  const totalScore = vulnerabilities.reduce((sum, vuln) => sum + (vuln.priorityScore || 0), 0);
  return totalScore / vulnerabilities.length;
};

const downloadFile = (content, filename, mimeType) => {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};