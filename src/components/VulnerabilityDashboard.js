import React, { useState, useEffect } from 'react';
import { Upload, FileText, AlertTriangle, Shield, TrendingUp, Search, Filter, Download, FileDown } from 'lucide-react';
import { exportToCSV, exportToJSON, exportExecutiveSummary } from '../utils/reportExporter';
import ScannerUpload from './ScannerUpload';
import VulnerabilityTable from './VulnerabilityTable';
import SummaryCards from './SummaryCards';
import LatestNews from './LatestNews';
import Sidebar from './VulnerabilitySidebar';
import VulnerabilityPrioritizer from './VulnerabilityPrioritizer';

const VulnerabilityDashboard = () => {
  const [activeTab, setActiveTab] = useState('upload');
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [filteredVulnerabilities, setFilteredVulnerabilities] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Filter states
  const [severityFilter, setSeverityFilter] = useState('all');
  const [exploitFilter, setExploitFilter] = useState('all');
  const [assetFilter, setAssetFilter] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');

  // Apply filters
  useEffect(() => {
    let filtered = [...vulnerabilities];

    if (severityFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.severity === severityFilter);
    }

    if (exploitFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.exploitAvailable === (exploitFilter === 'yes'));
    }

    if (assetFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.asset === assetFilter);
    }

    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(vuln => 
        vuln.cveId.toLowerCase().includes(query) ||
        vuln.title.toLowerCase().includes(query) ||
        vuln.description.toLowerCase().includes(query)
      );
    }

    setFilteredVulnerabilities(filtered);
  }, [vulnerabilities, severityFilter, exploitFilter, assetFilter, searchQuery]);

  const handleFileUpload = (parsedData) => {
    setVulnerabilities(parsedData);
    setError(null);
  };

  const handleUploadError = (errorMessage) => {
    setError(errorMessage);
    setVulnerabilities([]);
  };

  const getUniqueAssets = () => {
    const assets = vulnerabilities.map(vuln => vuln.asset).filter(Boolean);
    return ['all', ...Array.from(new Set(assets))];
  };

  const handleExport = (format) => {
    const timestamp = new Date().toISOString().split('T')[0];
    
    switch (format) {
      case 'csv':
        exportToCSV(filteredVulnerabilities, `vulnerability-report-${timestamp}.csv`);
        break;
      case 'json':
        exportToJSON(filteredVulnerabilities, `vulnerability-report-${timestamp}.json`);
        break;
      case 'executive':
        exportExecutiveSummary(filteredVulnerabilities, `executive-summary-${timestamp}.md`);
        break;
      default:
        console.error('Unknown export format:', format);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center">
              <Shield className="h-8 w-8 text-primary-600 mr-3" />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">ThreatBoard</h1>
                <p className="text-sm text-gray-600">Vulnerability Management Dashboard</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              {vulnerabilities.length > 0 && (
                <div className="relative group">
                  <button className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    <Download className="h-4 w-4 mr-2" />
                    Export Report
                  </button>
                  <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10">
                    <div className="py-1">
                      <button
                        onClick={() => handleExport('executive')}
                        className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      >
                        <FileDown className="h-4 w-4 mr-2" />
                        Executive Summary (MD)
                      </button>
                      <button
                        onClick={() => handleExport('csv')}
                        className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      >
                        <FileDown className="h-4 w-4 mr-2" />
                        Detailed Report (CSV)
                      </button>
                      <button
                        onClick={() => handleExport('json')}
                        className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      >
                        <FileDown className="h-4 w-4 mr-2" />
                        Technical Data (JSON)
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <Sidebar 
          activeTab={activeTab}
          onTabChange={setActiveTab}
          totalVulnerabilities={vulnerabilities.length}
          severityCounts={getSeverityCounts(vulnerabilities)}
        />

        {/* Main Content */}
        <main className="flex-1 p-6">
          {/* Search and Filters */}
          <div className="mb-6">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search vulnerabilities by CVE ID, title, or description..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                  />
                </div>
              </div>
              <div className="flex gap-2">
                <select
                  value={severityFilter}
                  onChange={(e) => setSeverityFilter(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                >
                  <option value="all">All Severities</option>
                  <option value="Critical">Critical</option>
                  <option value="High">High</option>
                  <option value="Medium">Medium</option>
                  <option value="Low">Low</option>
                </select>
                <select
                  value={exploitFilter}
                  onChange={(e) => setExploitFilter(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                >
                  <option value="all">All Exploits</option>
                  <option value="yes">Exploit Available</option>
                  <option value="no">No Exploit</option>
                </select>
                <select
                  value={assetFilter}
                  onChange={(e) => setAssetFilter(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                >
                  {getUniqueAssets().map(asset => (
                    <option key={asset} value={asset}>
                      {asset === 'all' ? 'All Assets' : asset}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          {/* Content based on active tab */}
          {activeTab === 'upload' ? (
            <div className="space-y-6">
              {/* Scanner Upload Section */}
              <ScannerUpload 
                onFileUpload={handleFileUpload}
                onError={handleUploadError}
                loading={loading}
                setLoading={setLoading}
              />

              {/* Error Display */}
              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                  <div className="flex">
                    <AlertTriangle className="h-5 w-5 text-red-400 mr-2" />
                    <div>
                      <h3 className="text-sm font-medium text-red-800">Upload Error</h3>
                      <p className="text-sm text-red-700 mt-1">{error}</p>
                    </div>
                  </div>
                </div>
              )}

              {/* Summary Cards */}
              {vulnerabilities.length > 0 && (
                <SummaryCards vulnerabilities={vulnerabilities} />
              )}

              {/* Intelligent Vulnerability Prioritization */}
              {vulnerabilities.length > 0 && (
                <VulnerabilityPrioritizer vulnerabilities={filteredVulnerabilities} />
              )}

              {/* Vulnerability Table */}
              {vulnerabilities.length > 0 && (
                <VulnerabilityTable 
                  vulnerabilities={filteredVulnerabilities}
                  loading={loading}
                />
              )}
            </div>
          ) : (
            <LatestNews />
          )}
        </main>
      </div>
    </div>
  );
};

// Helper function to get severity counts
const getSeverityCounts = (vulnerabilities) => {
  const counts = { Critical: 0, High: 0, Medium: 0, Low: 0 };
  vulnerabilities.forEach(vuln => {
    if (counts.hasOwnProperty(vuln.severity)) {
      counts[vuln.severity]++;
    }
  });
  return counts;
};

export default VulnerabilityDashboard;
