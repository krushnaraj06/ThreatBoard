import React, { useState } from 'react';
import { ExternalLink, AlertTriangle, Target, Calendar, ChevronDown, ChevronRight } from 'lucide-react';

const VulnerabilityTable = ({ vulnerabilities, loading }) => {
  const [expandedRows, setExpandedRows] = useState(new Set());
  const [sortConfig, setSortConfig] = useState({ key: 'riskScore', direction: 'desc' });

  const toggleRow = (cveId) => {
    const newExpanded = new Set(expandedRows);
    if (newExpanded.has(cveId)) {
      newExpanded.delete(cveId);
    } else {
      newExpanded.add(cveId);
    }
    setExpandedRows(newExpanded);
  };

  const handleSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  const sortedVulnerabilities = [...vulnerabilities].sort((a, b) => {
    let aValue = a[sortConfig.key];
    let bValue = b[sortConfig.key];

    // Handle numeric values
    if (typeof aValue === 'number' && typeof bValue === 'number') {
      return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;
    }

    // Handle string values
    if (typeof aValue === 'string' && typeof bValue === 'string') {
      aValue = aValue.toLowerCase();
      bValue = bValue.toLowerCase();
      if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;
      if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;
      return 0;
    }

    return 0;
  });

  const getSeverityBadge = (severity) => {
    const baseClasses = "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium";
    
    switch (severity) {
      case 'Critical':
        return `${baseClasses} bg-red-100 text-red-800 border border-red-200`;
      case 'High':
        return `${baseClasses} bg-orange-100 text-orange-800 border border-orange-200`;
      case 'Medium':
        return `${baseClasses} bg-yellow-100 text-yellow-800 border border-yellow-200`;
      case 'Low':
        return `${baseClasses} bg-green-100 text-green-800 border border-green-200`;
      case 'Info':
        return `${baseClasses} bg-blue-100 text-blue-800 border border-blue-200`;
      default:
        return `${baseClasses} bg-gray-100 text-gray-800 border border-gray-200`;
    }
  };

  const getExploitBadge = (exploitAvailable) => {
    if (exploitAvailable) {
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 border border-red-200">
          <Target className="h-3 w-3 mr-1" />
          Yes
        </span>
      );
    }
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 border border-green-200">
        No
      </span>
    );
  };

  const getRiskScoreBar = (score) => {
    const getColor = (score) => {
      if (score >= 80) return 'bg-red-500';
      if (score >= 60) return 'bg-orange-500';
      if (score >= 40) return 'bg-yellow-500';
      if (score >= 20) return 'bg-green-500';
      return 'bg-gray-500';
    };

    return (
      <div className="flex items-center space-x-2">
        <div className="w-16 bg-gray-200 rounded-full h-2">
          <div 
            className={`h-2 rounded-full ${getColor(score)}`}
            style={{ width: `${score}%` }}
          ></div>
        </div>
        <span className="text-sm font-medium text-gray-900 w-8">{score}</span>
      </div>
    );
  };

  const formatDate = (dateString) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-GB', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
    } catch {
      return 'N/A';
    }
  };

  const getNvdUrl = (cveId) => {
    if (cveId === 'N/A') return '#';
    return `https://nvd.nist.gov/vuln/detail/${cveId}`;
  };

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
        <div className="flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
          <span className="ml-3 text-gray-600">Loading vulnerabilities...</span>
        </div>
      </div>
    );
  }

  if (!vulnerabilities || vulnerabilities.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
        <AlertTriangle className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-2 text-sm font-medium text-gray-900">No vulnerabilities found</h3>
        <p className="mt-1 text-sm text-gray-500">
          Upload a scanner output file to see vulnerability data.
        </p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
      <div className="px-6 py-4 border-b border-gray-200">
        <h3 className="text-lg font-medium text-gray-900">Vulnerability Details</h3>
        <p className="text-sm text-gray-500">
          {vulnerabilities.length} vulnerabilities found
        </p>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button
                  onClick={() => handleSort('cveId')}
                  className="flex items-center space-x-1 hover:text-gray-700"
                >
                  <span>CVE ID</span>
                  {sortConfig.key === 'cveId' && (
                    <span className="text-primary-600">
                      {sortConfig.direction === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </button>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button
                  onClick={() => handleSort('title')}
                  className="flex items-center space-x-1 hover:text-gray-700"
                >
                  <span>Vulnerability Title</span>
                  {sortConfig.key === 'title' && (
                    <span className="text-primary-600">
                      {sortConfig.direction === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </button>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button
                  onClick={() => handleSort('severity')}
                  className="flex items-center space-x-1 hover:text-gray-700"
                >
                  <span>Severity</span>
                  {sortConfig.key === 'severity' && (
                    <span className="text-primary-600">
                      {sortConfig.direction === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </button>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button
                  onClick={() => handleSort('riskScore')}
                  className="flex items-center space-x-1 hover:text-gray-700"
                >
                  <span>Risk Score</span>
                  {sortConfig.key === 'riskScore' && (
                    <span className="text-primary-600">
                      {sortConfig.direction === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </button>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button
                  onClick={() => handleSort('asset')}
                  className="flex items-center space-x-1 hover:text-gray-700"
                >
                  <span>Asset</span>
                  {sortConfig.key === 'asset' && (
                    <span className="text-primary-600">
                      {sortConfig.direction === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </button>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button
                  onClick={() => handleSort('exploitAvailable')}
                  className="flex items-center space-x-1 hover:text-gray-700"
                >
                  <span>Exploit</span>
                  {sortConfig.key === 'exploitAvailable' && (
                    <span className="text-primary-600">
                      {sortConfig.direction === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </button>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button
                  onClick={() => handleSort('publishedDate')}
                  className="flex items-center space-x-1 hover:text-gray-700"
                >
                  <span>Published</span>
                  {sortConfig.key === 'publishedDate' && (
                    <span className="text-primary-600">
                      {sortConfig.direction === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </button>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {sortedVulnerabilities.map((vuln) => (
              <React.Fragment key={vuln.cveId}>
                <tr className="hover:bg-gray-50 transition-colors duration-150">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <button
                        onClick={() => toggleRow(vuln.cveId)}
                        className="mr-2 text-gray-400 hover:text-gray-600"
                      >
                        {expandedRows.has(vuln.cveId) ? (
                          <ChevronDown className="h-4 w-4" />
                        ) : (
                          <ChevronRight className="h-4 w-4" />
                        )}
                      </button>
                      <a
                        href={getNvdUrl(vuln.cveId)}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-primary-600 hover:text-primary-800 font-mono text-sm font-medium hover:underline flex items-center"
                      >
                        {vuln.cveId}
                        <ExternalLink className="h-3 w-3 ml-1" />
                      </a>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="text-sm font-medium text-gray-900 max-w-xs truncate">
                      {vuln.title}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={getSeverityBadge(vuln.severity)}>
                      {vuln.severity}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {getRiskScoreBar(vuln.riskScore || 0)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {vuln.asset}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {getExploitBadge(vuln.exploitAvailable)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <div className="flex items-center">
                      <Calendar className="h-4 w-4 mr-1" />
                      {formatDate(vuln.publishedDate)}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button className="text-primary-600 hover:text-primary-900">
                      View Details
                    </button>
                  </td>
                </tr>
                
                {/* Expanded Row */}
                {expandedRows.has(vuln.cveId) && (
                  <tr>
                    <td colSpan="8" className="px-6 py-4 bg-gray-50">
                      <div className="space-y-3">
                        <div>
                          <h4 className="text-sm font-medium text-gray-900 mb-2">Description</h4>
                          <p className="text-sm text-gray-600">{vuln.description}</p>
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <h4 className="text-sm font-medium text-gray-900 mb-1">CVSS Score</h4>
                            <p className="text-sm text-gray-600">{vuln.cvssScore}</p>
                          </div>
                          <div>
                            <h4 className="text-sm font-medium text-gray-900 mb-1">Risk Factors</h4>
                            <div className="flex flex-wrap gap-2">
                              {vuln.severity === 'Critical' && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                  High Impact
                                </span>
                              )}
                              {vuln.exploitAvailable && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                                  Exploit Available
                                </span>
                              )}
                              {vuln.riskScore >= 80 && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                  High Risk Score
                                </span>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    </td>
                  </tr>
                )}
              </React.Fragment>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default VulnerabilityTable;
