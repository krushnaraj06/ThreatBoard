import React, { useState, useEffect } from 'react';
import { AlertTriangle, Shield, Target, Clock, ExternalLink, ChevronDown, ChevronUp, Zap, TrendingUp, BookOpen } from 'lucide-react';
import RemediationGuide from './RemediationGuide';

const VulnerabilityPrioritizer = ({ vulnerabilities }) => {
    const [prioritizedVulns, setPrioritizedVulns] = useState([]);
    const [expandedVuln, setExpandedVuln] = useState(null);
    const [showRemediationGuide, setShowRemediationGuide] = useState(null);

    useEffect(() => {
        if (vulnerabilities && vulnerabilities.length > 0) {
            console.log('VulnerabilityPrioritizer received:', vulnerabilities.length, 'vulnerabilities');
            console.log('Sample vulnerability:', vulnerabilities[0]);
            
            const analyzed = analyzeAndPrioritize(vulnerabilities);
            console.log('After analysis and prioritization:', analyzed.length, 'vulnerabilities');
            console.log('Top 3 by priority score:', analyzed.slice(0, 3).map(v => ({
                cveId: v.cveId,
                title: v.title,
                severity: v.severity,
                priorityScore: v.priorityScore,
                urgency: v.urgency
            })));
            
            setPrioritizedVulns(analyzed);
        }
    }, [vulnerabilities]);

    const analyzeAndPrioritize = (vulns) => {
        return vulns.map(vuln => {
            const analysis = performVulnerabilityAnalysis(vuln);
            return {
                ...vuln,
                ...analysis
            };
        }).sort((a, b) => b.priorityScore - a.priorityScore);
    };

    const performVulnerabilityAnalysis = (vuln) => {
        let priorityScore = 0;
        let riskFactors = [];
        let remediationAdvice = [];
        let businessImpact = '';
        let urgency = 'Low';

        // Base severity scoring
        const severityScores = {
            'Critical': 100,
            'High': 75,
            'Medium': 50,
            'Low': 25,
            'Info': 10,
            'Unknown': 30
        };

        priorityScore += severityScores[vuln.severity] || 30;

        // CVSS Score analysis
        if (vuln.cvssScore && vuln.cvssScore !== 'N/A') {
            const cvss = parseFloat(vuln.cvssScore);
            if (cvss >= 9.0) {
                priorityScore += 25;
                riskFactors.push('Extremely high CVSS score (9.0+)');
            } else if (cvss >= 7.0) {
                priorityScore += 15;
                riskFactors.push('High CVSS score (7.0+)');
            }
        }

        // Exploit availability
        if (vuln.exploitAvailable) {
            priorityScore += 30;
            riskFactors.push('Public exploit available');
            urgency = 'Critical';
        }

        // Asset criticality analysis
        const criticalAssets = ['production', 'web-server', 'database', 'api', 'gateway', 'controller'];
        const assetName = (vuln.asset || '').toLowerCase();

        if (criticalAssets.some(critical => assetName.includes(critical))) {
            priorityScore += 20;
            riskFactors.push('Critical asset affected');
        }

        // Technology-specific risk assessment
        const highRiskTechs = ['apache', 'nginx', 'mysql', 'postgresql', 'redis', 'docker', 'kubernetes'];
        const vulnText = `${vuln.title} ${vuln.description}`.toLowerCase();

        for (const tech of highRiskTechs) {
            if (vulnText.includes(tech)) {
                priorityScore += 10;
                riskFactors.push(`High-risk technology: ${tech}`);
                break;
            }
        }

        // Age-based urgency (if published date is available)
        if (vuln.publishedDate) {
            const publishDate = new Date(vuln.publishedDate);
            const daysSincePublished = (Date.now() - publishDate.getTime()) / (1000 * 60 * 60 * 24);

            if (daysSincePublished > 90) {
                priorityScore += 15;
                riskFactors.push('Vulnerability is over 90 days old');
            }
        }

        // Generate remediation advice
        remediationAdvice = generateRemediationAdvice(vuln, riskFactors);

        // Determine business impact
        businessImpact = assessBusinessImpact(vuln, riskFactors);

        // Set urgency level
        if (priorityScore >= 120) urgency = 'Critical';
        else if (priorityScore >= 90) urgency = 'High';
        else if (priorityScore >= 60) urgency = 'Medium';
        else urgency = 'Low';

        return {
            priorityScore: Math.min(priorityScore, 150),
            riskFactors,
            remediationAdvice,
            businessImpact,
            urgency,
            timeToFix: estimateTimeToFix(vuln, priorityScore)
        };
    };

    const generateRemediationAdvice = (vuln, riskFactors) => {
        const advice = [];
        const vulnText = `${vuln.title} ${vuln.description}`.toLowerCase();

        // Generic high-priority actions
        if (vuln.exploitAvailable) {
            advice.push({
                priority: 'IMMEDIATE',
                action: 'Apply security patches immediately - public exploit exists',
                icon: '🚨'
            });
        }

        // Technology-specific advice
        if (vulnText.includes('apache') || vulnText.includes('nginx')) {
            advice.push({
                priority: 'HIGH',
                action: 'Update web server to latest stable version',
                icon: '🌐'
            });
            advice.push({
                priority: 'MEDIUM',
                action: 'Review and harden web server configuration',
                icon: '⚙️'
            });
        }

        if (vulnText.includes('mysql') || vulnText.includes('postgresql')) {
            advice.push({
                priority: 'HIGH',
                action: 'Update database server and review access controls',
                icon: '🗄️'
            });
            advice.push({
                priority: 'MEDIUM',
                action: 'Implement database activity monitoring',
                icon: '👁️'
            });
        }

        if (vulnText.includes('docker') || vulnText.includes('container')) {
            advice.push({
                priority: 'HIGH',
                action: 'Update container runtime and base images',
                icon: '📦'
            });
            advice.push({
                priority: 'MEDIUM',
                action: 'Implement container security scanning in CI/CD',
                icon: '🔍'
            });
        }

        // Authentication/Authorization vulnerabilities
        if (vulnText.includes('authentication') || vulnText.includes('authorization')) {
            advice.push({
                priority: 'HIGH',
                action: 'Review and strengthen authentication mechanisms',
                icon: '🔐'
            });
        }

        // SQL Injection
        if (vulnText.includes('sql injection')) {
            advice.push({
                priority: 'IMMEDIATE',
                action: 'Implement parameterized queries and input validation',
                icon: '💉'
            });
        }

        // Default generic advice
        if (advice.length === 0) {
            advice.push({
                priority: 'HIGH',
                action: 'Apply vendor security patches and updates',
                icon: '🔧'
            });
            advice.push({
                priority: 'MEDIUM',
                action: 'Review system configuration and access controls',
                icon: '⚙️'
            });
        }

        // Always add monitoring advice for high-priority vulnerabilities
        if (vuln.severity === 'Critical' || vuln.severity === 'High') {
            advice.push({
                priority: 'MEDIUM',
                action: 'Implement enhanced monitoring and alerting',
                icon: '📊'
            });
        }

        return advice;
    };

    const assessBusinessImpact = (vuln, riskFactors) => {
        const vulnText = `${vuln.title} ${vuln.description}`.toLowerCase();

        if (vuln.exploitAvailable && vuln.severity === 'Critical') {
            return 'SEVERE: Immediate risk of data breach, system compromise, or service disruption. Could result in significant financial loss, regulatory penalties, and reputation damage.';
        }

        if (vulnText.includes('remote code execution') || vulnText.includes('rce')) {
            return 'HIGH: Attackers could gain complete control of affected systems, leading to data theft, system manipulation, or lateral movement within the network.';
        }

        if (vulnText.includes('sql injection') || vulnText.includes('authentication bypass')) {
            return 'HIGH: Potential unauthorized access to sensitive data, customer information, or administrative functions.';
        }

        if (vulnText.includes('denial of service') || vulnText.includes('dos')) {
            return 'MEDIUM: Service availability could be impacted, leading to business disruption and potential revenue loss.';
        }

        if (vuln.severity === 'High') {
            return 'MEDIUM: Significant security risk that could lead to unauthorized access or data exposure if exploited.';
        }

        return 'LOW: Limited impact on business operations, but should be addressed as part of regular security maintenance.';
    };

    const estimateTimeToFix = (vuln, priorityScore) => {
        if (priorityScore >= 120) return '< 24 hours';
        if (priorityScore >= 90) return '1-3 days';
        if (priorityScore >= 60) return '1-2 weeks';
        return '1 month';
    };

    const getPriorityBadge = (urgency) => {
        const baseClasses = "inline-flex items-center px-3 py-1 text-xs font-bold rounded-full";

        switch (urgency) {
            case 'Critical':
                return `${baseClasses} bg-red-100 text-red-800 border border-red-200`;
            case 'High':
                return `${baseClasses} bg-orange-100 text-orange-800 border border-orange-200`;
            case 'Medium':
                return `${baseClasses} bg-yellow-100 text-yellow-800 border border-yellow-200`;
            case 'Low':
                return `${baseClasses} bg-green-100 text-green-800 border border-green-200`;
            default:
                return `${baseClasses} bg-gray-100 text-gray-800 border border-gray-200`;
        }
    };

    const getPriorityIcon = (urgency) => {
        switch (urgency) {
            case 'Critical':
                return <AlertTriangle className="h-4 w-4 text-red-600" />;
            case 'High':
                return <TrendingUp className="h-4 w-4 text-orange-600" />;
            case 'Medium':
                return <Clock className="h-4 w-4 text-yellow-600" />;
            case 'Low':
                return <Shield className="h-4 w-4 text-green-600" />;
            default:
                return <Target className="h-4 w-4 text-gray-600" />;
        }
    };

    const toggleExpanded = (cveId) => {
        setExpandedVuln(expandedVuln === cveId ? null : cveId);
    };

    if (!prioritizedVulns.length) {
        return (
            <div className="text-center py-8">
                <Shield className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">No vulnerabilities to analyze</p>
            </div>
        );
    }

    return (
        <div className="space-y-4">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                    <Target className="h-6 w-6 text-primary-600 mr-2" />
                    Intelligent Vulnerability Prioritization
                </h2>
                <p className="text-gray-600 mb-6">
                    Vulnerabilities analyzed and prioritized based on severity, exploit availability, asset criticality, and business impact.
                </p>

                {/* Priority Summary */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    {['Critical', 'High', 'Medium', 'Low'].map(urgency => {
                        const count = prioritizedVulns.filter(v => v.urgency === urgency).length;
                        return (
                            <div key={urgency} className="bg-gray-50 rounded-lg p-4 text-center">
                                <div className="flex items-center justify-center mb-2">
                                    {getPriorityIcon(urgency)}
                                </div>
                                <div className="text-2xl font-bold text-gray-900">{count}</div>
                                <div className="text-sm text-gray-600">{urgency} Priority</div>
                            </div>
                        );
                    })}
                </div>
            </div>

            {/* Prioritized Vulnerabilities List */}
            <div className="space-y-4">
                {prioritizedVulns.map((vuln, index) => (
                    <div key={vuln.cveId || index} className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                        <div className="p-6">
                            <div className="flex items-start justify-between mb-4">
                                <div className="flex-1">
                                    <div className="flex items-center gap-3 mb-2">
                                        <span className={getPriorityBadge(vuln.urgency)}>
                                            {getPriorityIcon(vuln.urgency)}
                                            <span className="ml-1">{vuln.urgency} Priority</span>
                                        </span>
                                        <span className="text-sm font-mono text-gray-600">
                                            Score: {vuln.priorityScore}/150
                                        </span>
                                        <span className="text-sm text-gray-500">
                                            Fix by: {vuln.timeToFix}
                                        </span>
                                    </div>
                                    <h3 className="text-lg font-semibold text-gray-900 mb-1">
                                        {vuln.cveId && (
                                            <a
                                                href={`https://nvd.nist.gov/vuln/detail/${vuln.cveId}`}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                className="text-primary-600 hover:text-primary-800 mr-2"
                                            >
                                                {vuln.cveId}
                                                <ExternalLink className="inline h-4 w-4 ml-1" />
                                            </a>
                                        )}
                                        {vuln.title}
                                    </h3>
                                    <p className="text-gray-600 mb-3">{vuln.description}</p>

                                    <div className="flex items-center gap-4 text-sm text-gray-500">
                                        <span>Asset: <strong>{vuln.asset}</strong></span>
                                        <span>Severity: <strong>{vuln.severity}</strong></span>
                                        {vuln.cvssScore && vuln.cvssScore !== 'N/A' && (
                                            <span>CVSS: <strong>{vuln.cvssScore}</strong></span>
                                        )}
                                        {vuln.exploitAvailable && (
                                            <span className="text-red-600 font-semibold flex items-center">
                                                <Zap className="h-4 w-4 mr-1" />
                                                Exploit Available
                                            </span>
                                        )}
                                    </div>
                                </div>

                                <button
                                    onClick={() => toggleExpanded(vuln.cveId || index)}
                                    className="ml-4 p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100"
                                >
                                    {expandedVuln === (vuln.cveId || index) ? (
                                        <ChevronUp className="h-5 w-5" />
                                    ) : (
                                        <ChevronDown className="h-5 w-5" />
                                    )}
                                </button>
                            </div>

                            {/* Risk Factors Preview */}
                            <div className="flex flex-wrap gap-2 mb-4">
                                {vuln.riskFactors.slice(0, 3).map((factor, idx) => (
                                    <span key={idx} className="inline-flex items-center px-2 py-1 text-xs bg-red-50 text-red-700 rounded-full border border-red-200">
                                        <AlertTriangle className="h-3 w-3 mr-1" />
                                        {factor}
                                    </span>
                                ))}
                                {vuln.riskFactors.length > 3 && (
                                    <span className="text-xs text-gray-500">
                                        +{vuln.riskFactors.length - 3} more factors
                                    </span>
                                )}
                            </div>

                            {/* Quick Actions */}
                            <div className="flex flex-wrap gap-2 items-center">
                                {vuln.remediationAdvice.slice(0, 2).map((advice, idx) => (
                                    <span key={idx} className="inline-flex items-center px-3 py-1 text-xs bg-blue-50 text-blue-700 rounded-full border border-blue-200">
                                        <span className="mr-1">{advice.icon}</span>
                                        {advice.action}
                                    </span>
                                ))}
                                <button
                                    onClick={() => setShowRemediationGuide(showRemediationGuide === (vuln.cveId || index) ? null : (vuln.cveId || index))}
                                    className="inline-flex items-center px-3 py-1 text-xs bg-green-50 text-green-700 rounded-full border border-green-200 hover:bg-green-100 transition-colors"
                                >
                                    <BookOpen className="h-3 w-3 mr-1" />
                                    {showRemediationGuide === (vuln.cveId || index) ? 'Hide' : 'Show'} Full Guide
                                </button>
                            </div>
                        </div>

                        {/* Comprehensive Remediation Guide */}
                        {showRemediationGuide === (vuln.cveId || index) && (
                            <div className="border-t border-gray-200 p-6">
                                <RemediationGuide vulnerability={vuln} />
                            </div>
                        )}

                        {/* Expanded Details */}
                        {expandedVuln === (vuln.cveId || index) && (
                            <div className="border-t border-gray-200 bg-gray-50 p-6">
                                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                    {/* Business Impact */}
                                    <div>
                                        <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                                            <TrendingUp className="h-4 w-4 mr-2 text-red-600" />
                                            Business Impact
                                        </h4>
                                        <p className="text-sm text-gray-700 bg-white p-3 rounded-lg border">
                                            {vuln.businessImpact}
                                        </p>
                                    </div>

                                    {/* All Risk Factors */}
                                    <div>
                                        <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                                            <AlertTriangle className="h-4 w-4 mr-2 text-orange-600" />
                                            Risk Factors
                                        </h4>
                                        <div className="space-y-2">
                                            {vuln.riskFactors.map((factor, idx) => (
                                                <div key={idx} className="flex items-center text-sm text-gray-700 bg-white p-2 rounded border">
                                                    <AlertTriangle className="h-3 w-3 mr-2 text-red-500 flex-shrink-0" />
                                                    {factor}
                                                </div>
                                            ))}
                                        </div>
                                    </div>

                                    {/* Complete Remediation Plan */}
                                    <div className="lg:col-span-2">
                                        <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                                            <Shield className="h-4 w-4 mr-2 text-green-600" />
                                            Remediation Action Plan
                                        </h4>
                                        <div className="space-y-3">
                                            {vuln.remediationAdvice.map((advice, idx) => (
                                                <div key={idx} className="flex items-start bg-white p-3 rounded-lg border">
                                                    <span className="text-lg mr-3 flex-shrink-0">{advice.icon}</span>
                                                    <div className="flex-1">
                                                        <div className="flex items-center gap-2 mb-1">
                                                            <span className={`px-2 py-1 text-xs font-semibold rounded ${advice.priority === 'IMMEDIATE' ? 'bg-red-100 text-red-800' :
                                                                advice.priority === 'HIGH' ? 'bg-orange-100 text-orange-800' :
                                                                    'bg-yellow-100 text-yellow-800'
                                                                }`}>
                                                                {advice.priority}
                                                            </span>
                                                        </div>
                                                        <p className="text-sm text-gray-700">{advice.action}</p>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                ))}
            </div>
        </div>
    );
};

export default VulnerabilityPrioritizer;