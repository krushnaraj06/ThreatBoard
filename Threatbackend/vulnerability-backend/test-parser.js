const fileParser = require('./services/fileParser');
const fs = require('fs');
const path = require('path');

// Test the flexible parser with various data formats
async function testFlexibleParser() {
  console.log('🧪 Testing Flexible File Parser\n');

  // Test 1: Messy JSON with different field names
  const messyJSON = {
    scan_results: {
      findings: [
        {
          cve_id: 'CVE-2024-12345',
          vuln_name: 'Apache Log4j2 RCE',
          vuln_desc: 'Remote code execution vulnerability',
          risk_level: 'Critical',
          target_host: 'web-server-01',
          cvss_value: '9.8'
        },
        {
          cve_id: 'CVE-2024-12346',
          vuln_name: 'OpenSSL DoS',
          vuln_desc: 'Denial of service vulnerability',
          risk_level: 'High',
          target_host: 'api-server-02',
          cvss_value: '7.5'
        }
      ]
    }
  };

  console.log('📊 Test 1: Messy JSON with non-standard field names');
  try {
    // Create a temporary file
    const tempFile1 = path.join(__dirname, 'temp-test1.json');
    fs.writeFileSync(tempFile1, JSON.stringify(messyJSON, null, 2));
    
    // Test the full parsing workflow
    const result1 = await fileParser.parseFile(tempFile1, 'custom');
    console.log(`✅ Found ${result1.length} vulnerabilities`);
    if (result1.length > 0) {
      console.log('Sample vulnerability:', JSON.stringify(result1[0], null, 2));
    }
    
    // Clean up
    fs.unlinkSync(tempFile1);
  } catch (error) {
    console.log(`❌ Error: ${error.message}`);
  }

  // Test 2: JSON with CVE patterns but no clear structure
  const unstructuredJSON = {
    report: {
      summary: 'Security scan completed',
      timestamp: '2024-01-15T10:00:00Z',
      details: {
        host1: {
          ip: '192.168.1.100',
          issues: [
            'CVE-2024-12347 found in Apache',
            'CVE-2024-12348 detected in OpenSSL'
          ],
          severity: 'High'
        },
        host2: {
          ip: '192.168.1.101',
          issues: [
            'CVE-2024-12349 in MySQL'
          ],
          severity: 'Medium'
        }
      }
    }
  };

  console.log('\n📊 Test 2: Unstructured JSON with embedded CVEs');
  try {
    const tempFile2 = path.join(__dirname, 'temp-test2.json');
    fs.writeFileSync(tempFile2, JSON.stringify(unstructuredJSON, null, 2));
    
    const result2 = await fileParser.parseFile(tempFile2, 'custom');
    console.log(`✅ Found ${result2.length} vulnerabilities`);
    if (result2.length > 0) {
      console.log('Sample vulnerability:', JSON.stringify(result2[0], null, 2));
    }
    
    fs.unlinkSync(tempFile2);
  } catch (error) {
    console.log(`❌ Error: ${error.message}`);
  }

  // Test 3: JSON with minimal data
  const minimalJSON = {
    scan_output: 'CVE-2024-12350 detected on server',
    timestamp: '2024-01-15T10:00:00Z'
  };

  console.log('\n📊 Test 3: Minimal JSON with basic CVE reference');
  try {
    const tempFile3 = path.join(__dirname, 'temp-test3.json');
    fs.writeFileSync(tempFile3, JSON.stringify(minimalJSON, null, 2));
    
    const result3 = await fileParser.parseFile(tempFile3, 'custom');
    console.log(`✅ Found ${result3.length} vulnerabilities`);
    if (result3.length > 0) {
      console.log('Sample vulnerability:', JSON.stringify(result3[0], null, 2));
    }
    
    fs.unlinkSync(tempFile3);
  } catch (error) {
    console.log(`❌ Error: ${error.message}`);
  }

  // Test 4: Real-world messy scanner output
  const realWorldMessy = {
    "scan_report": {
      "generated_at": "2024-01-15T10:00:00Z",
      "scanner": "Custom Security Scanner v2.1",
      "targets": [
        {
          "hostname": "web-server-01.company.com",
          "ip_address": "10.0.1.100",
          "findings": [
            {
              "issue_id": "ISSUE-001",
              "cve_reference": "CVE-2024-12351",
              "vulnerability_title": "SQL Injection in Login Form",
              "description": "The login form is vulnerable to SQL injection attacks",
              "risk_rating": "Critical",
              "cvss_base_score": "9.1",
              "affected_component": "web application",
              "recommendation": "Use parameterized queries"
            },
            {
              "issue_id": "ISSUE-002", 
              "cve_reference": "CVE-2024-12352",
              "vulnerability_title": "XSS in Search Box",
              "description": "Cross-site scripting vulnerability in search functionality",
              "risk_rating": "High",
              "cvss_base_score": "7.2",
              "affected_component": "search module",
              "recommendation": "Implement input validation"
            }
          ]
        },
        {
          "hostname": "api-server-02.company.com",
          "ip_address": "10.0.1.101",
          "findings": [
            {
              "issue_id": "ISSUE-003",
              "cve_reference": "CVE-2024-12353", 
              "vulnerability_title": "Weak SSL Configuration",
              "description": "SSL/TLS configuration allows weak ciphers",
              "risk_rating": "Medium",
              "cvss_base_score": "5.8",
              "affected_component": "SSL/TLS stack",
              "recommendation": "Disable weak ciphers"
            }
          ]
        }
      ]
    }
  };

  console.log('\n📊 Test 4: Real-world messy scanner output');
  try {
    const tempFile4 = path.join(__dirname, 'temp-test4.json');
    fs.writeFileSync(tempFile4, JSON.stringify(realWorldMessy, null, 2));
    
    const result4 = await fileParser.parseFile(tempFile4, 'custom');
    console.log(`✅ Found ${result4.length} vulnerabilities`);
    if (result4.length > 0) {
      console.log('Sample vulnerability:', JSON.stringify(result4[0], null, 2));
    }
    
    fs.unlinkSync(tempFile4);
  } catch (error) {
    console.log(`❌ Error: ${error.message}`);
  }

  console.log('\n🎯 Parser Testing Complete!');
}

// Run the test
testFlexibleParser().catch(console.error);
