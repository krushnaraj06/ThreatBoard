const express = require('express');
const multer = require('multer');
const path = require('path');
const vulnerabilityController = require('../controllers/vulnerabilityController');

const router = express.Router();

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/');
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 50 * 1024 * 1024, // 50MB limit
    files: 1
  },
  fileFilter: function (req, file, cb) {
    // Allow JSON, XML, CSV files
    const allowedTypes = ['.json', '.xml', '.csv'];
    const fileExt = path.extname(file.originalname).toLowerCase();
    
    if (allowedTypes.includes(fileExt)) {
      cb(null, true);
    } else {
      cb(new Error('Only JSON, XML, and CSV files are allowed'), false);
    }
  }
});

// File upload and processing routes
router.post('/upload', upload.single('scannerOutput'), vulnerabilityController.uploadScannerOutput);

// Basic vulnerability management routes
router.get('/vulnerabilities', vulnerabilityController.getVulnerabilities);
router.get('/vulnerabilities/:id', vulnerabilityController.getVulnerabilityById);
router.put('/vulnerabilities/:id', vulnerabilityController.updateVulnerability);
router.delete('/vulnerabilities/:id', vulnerabilityController.deleteVulnerability);
router.put('/vulnerabilities/bulk', vulnerabilityController.bulkUpdateVulnerabilities);

// Statistics and analytics routes
router.get('/statistics', vulnerabilityController.getStatistics);
router.get('/export', vulnerabilityController.exportVulnerabilities);

// NVD API integration routes
router.get('/latest', vulnerabilityController.getLatestCVEs);
router.get('/search', vulnerabilityController.searchCVEsByKeyword);
router.get('/nvd-status', vulnerabilityController.getNVDStatus);

// **NEW: Technical Enhancement Routes**

// 1. Advanced Search & Filtering
router.get('/search/advanced', vulnerabilityController.advancedSearchHandler);
router.get('/search/saved', vulnerabilityController.getSavedSearches);
router.get('/search/saved/:searchId', vulnerabilityController.executeSavedSearch);
router.get('/search/analytics', vulnerabilityController.getSearchAnalytics);

// 2. Multi-Scanner Integration
router.post('/scanners/integrate', vulnerabilityController.integrateScannerOutputs);
router.get('/scanners/comparison', vulnerabilityController.getScannerComparison);
router.get('/scanners/comparison/:scannerType', vulnerabilityController.getScannerComparisonByType);

// 3. Scanner Health Monitoring
router.get('/scanners/health', vulnerabilityController.monitorScannerHealth);
router.get('/scanners/health/:scannerType/history', vulnerabilityController.getScannerHealthHistory);

// 4. False Positive Reduction
router.post('/false-positives/analyze', vulnerabilityController.analyzeFalsePositives);
router.put('/false-positives/:vulnerabilityId', vulnerabilityController.updateFalsePositiveAnalysis);
router.get('/false-positives/statistics', vulnerabilityController.getFalsePositiveStatistics);

// Error handling middleware for multer
router.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        error: 'File too large',
        details: 'Maximum file size is 50MB',
        suggestion: 'Compress or split your file into smaller parts'
      });
    } else if (error.code === 'LIMIT_FILE_COUNT') {
      return res.status(400).json({
        error: 'Too many files',
        details: 'Only one file can be uploaded at a time',
        suggestion: 'Upload files one at a time'
      });
    }
  } else if (error.message.includes('Only JSON, XML, and CSV files are allowed')) {
    return res.status(400).json({
      error: 'Invalid file type',
      details: error.message,
      suggestion: 'Please upload a JSON, XML, or CSV file'
    });
  }
  
  next(error);
});

module.exports = router;
