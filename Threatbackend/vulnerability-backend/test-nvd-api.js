const vulnerabilityEnrichment = require('./services/vulnerabilityEnrichment');

async function testNVDAPI() {
  console.log('🧪 Testing NVD API Integration\n');

  try {
    // Test 1: Check NVD API status
    console.log('📡 Test 1: Checking NVD API status...');
    const status = await vulnerabilityEnrichment.getNVDStatus();
    console.log('Status:', status);
    
    // Test 2: Get latest CVEs
    console.log('\n📡 Test 2: Fetching latest 5 CVEs...');
    const latestCVEs = await vulnerabilityEnrichment.getLatestCVEs(5, 7);
    console.log(`Found ${latestCVEs.length} latest CVEs`);
    
    if (latestCVEs.length > 0) {
      console.log('Sample CVE:', {
        cveId: latestCVEs[0].cveId,
        title: latestCVEs[0].title,
        severity: latestCVEs[0].severity,
        cvssScore: latestCVEs[0].cvssScore
      });
    }
    
    // Test 3: Search CVEs by keyword
    console.log('\n📡 Test 3: Searching for CVEs with keyword "wordpress"...');
    const searchResults = await vulnerabilityEnrichment.searchCVEsByKeyword('wordpress', 3);
    console.log(`Found ${searchResults.length} CVEs matching "wordpress"`);
    
    if (searchResults.length > 0) {
      console.log('Sample search result:', {
        cveId: searchResults[0].cveId,
        title: searchResults[0].title,
        severity: searchResults[0].severity
      });
    }
    
    // Test 4: Test rate limiting
    console.log('\n📡 Test 4: Testing rate limiting...');
    console.log('Making multiple requests to test rate limiting...');
    
    const promises = [];
    for (let i = 0; i < 3; i++) {
      promises.push(vulnerabilityEnrichment.getLatestCVEs(1, 1));
    }
    
    const results = await Promise.all(promises);
    console.log(`Rate limiting test completed. Got ${results.length} results.`);
    
    console.log('\n✅ NVD API tests completed successfully!');
    
  } catch (error) {
    console.error('❌ NVD API test failed:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Run the test
testNVDAPI().catch(console.error);
